[pipeline:main]
pipeline =
    assembl

# Or, if you user Raven
#   raven
#   assembl

[app:assembl]
use = egg:assembl

pyramid.reload_templates = false
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
sqltap = false
pyramid.includes =
    pyramid_tm

# Don't let cornice handle exceptions
handle_exceptions = 
# Should we show our own view for exceptions? true for production.
assembl_handle_exceptions = true

# raven_url = http://<raven_client_key>@sentry.coeus.ca/<raven_id#>

tm.attempts=3

available_languages = fr_CA en_CA de
pyramid.default_locale_name = en_CA

# Should requirejs defeat browser caching?  Useful in development
requirejs.cache_bust = false

sqlalchemy.url = virtuoso://assembl:assembl@VOSU
# Unnessary to set this true in development, as logger_sqlalchemy DEBUG 
# below will also output sql statements
sqlalchemy.echo = False
sqlalchemy.strategy = atexit_cleanup
db_user = assembl
db_password = assembl
db_schema = assembl

jinja2.directories = assembl:templates

#WHAT IS THIS USED FOR?
assembl.domain = assembl.net

#If false, every user will be immediately validated
assembl.validate_registration_emails = true
mail.host = localhost
assembl.admin_email = webmaster@assembl.net

# Set a discussion slug here so root redirects to a that discussion.
# TODO: Replace with a host router.
# default_discussion = sandbox

# Offline mode: if true, the application will avoid making calls to other websites (e.g. gravatar)
#offline_mode = false

#The default theme.  If unset, will be set to "default"
#The themes must be stored in a folder assembl/static/css/themes/name_of_theme
#default_theme = default

# Each of these providers requires us to register a client app ID.
# Also, we must give a visible callback URL.
# Please contact maparent@acm.org for details.

# Users from these providers (if enabled in login_providers) will not need
# to verify their email
trusted_login_providers = facebook
 google
 twitter

login_providers =
# facebook
# twitter
# github
# google
# openid

# https://developers.facebook.com/docs/facebook-login/getting-started-web/
# https://developers.facebook.com/apps/
#
# facebook.consumer_key =
# facebook.consumer_secret =
facebook.scope = public_profile,email
supported_exports_list =

# https://dev.twitter.com/apps/new
#
# twitter.consumer_key =
# twitter.consumer_secret =

# http://developer.github.com/v3/oauth/
# https://github.com/settings/applications
#
# github.consumer_key =
# github.consumer_secret =
github.scope = repo

# https://code.google.com/apis/console/ ; API & auth; Credentials; Create Client ID for web application
# API & auth; APIs; Google+ API: Activate
# google.consumer_key =
# google.consumer_secret =
google.scope = profile

# This should be the front-facing URL
# openid.realm=

# Absolute url of image to show for users that do not have an avatar.
# If not present, assembl default will be used.
# Conflicts with avatar.gravatar_default, you cannot define both.
# Gravatar caches the image aggressively; change the filename to change the image.
#avatar.default_image_url = none

# What gravatar will use if email isn't found.
# If not present, the image above will be used.
# Typical values are: 
# identicon: a geometric pattern based on an email hash
# monsterid: a generated 'monster' with different colors, faces, etc
# wavatar: generated faces with differing features and backgrounds
# retro: generated, 8-bit arcade-style pixelated faces
# mm: only show avatars for people who have one on gravatar
avatar.gravatar_default = mm

# Beaker settings
beaker.session.type = ext:memcached
beaker.session.url = 127.0.0.1:11211
beaker.session.data_dir = %(here)s/data/sessions/data
beaker.session.lock_dir = %(here)s/data/sessions/lock
beaker.session.key = assembl_session
session.secret = CHANGEME_enter_a_secret
beaker.session.cookie_expires = false
beaker.session.cookie_on_exception = true
#security.hash_algorithm = sha256
security.email_token_salt = CHANGEME_enter_a_salt

# Anykeystore settings for Velruse
store = sqlalchemy
store.url = sqlite:///%(here)s/assembl.db

# Dogpile cache
dogpile_cache.backend = file
dogpile_cache.expiration_time = 10000
dogpile_cache.arguments.filename = var/dogpile_cache.dbm

# Change this to the hostname visible from outside
public_hostname = localhost
# Change this to the port visible from the outside
# Typically 80 for prod, 6543 for dev
public_port = 80

# Do we accept https? If so we'll force it in some cases.
accept_secure_connection = false
# Do we force https? (TODO)
require_secure_connection = false

# ZMQ Websockets are used for frontend to backend communication

# ZMQ model changes local socket (backend will connect to this)
# UNIQUE_PER_SERVER
# Convention:
# /0 thru /2: reserved for development
# /3 thru /4: reserved for automated testing
# /5-: production
changes.socket = ipc:///tmp/assembl_changes/5
changes.multiplex = true

# The port to use for the websocket (client frontends will connect to this)
# In prod, your firewall needs to allow this through or proxy it through nginx
# UNIQUE_PER_SERVER
# Convention:
# 8085 thru 8087: reserved for development
# 8088 thru 8089: reserved for automated testing
# 8090-: production
changes.websocket.port = 8090
# Whether the websocket is proxied by nginx, and exposed through the public_port
changes.websocket.proxied = true
changes.prefix = /socket

# Notification broker. possible configurations:

# Noop configurations: Just print.
# assembl.imodeleventwatcher = assembl.lib.model_watcher.ModelEventWatcherPrinter
# celery_tasks.notification_dispatch.imodeleventwatcher = assembl.lib.model_watcher.ModelEventWatcherPrinter
# celery_tasks.imap.imodeleventwatcher = assembl.lib.model_watcher.ModelEventWatcherPrinter

# Direct configuration
# assembl.imodeleventwatcher = assembl.models.notification.ModelEventWatcherNotificationSubscriptionDispatcher
# celery_tasks.notification_dispatch.imodeleventwatcher = assembl.lib.model_watcher.ModelEventWatcherPrinter
# celery_tasks.imap.imodeleventwatcher = assembl.lib.model_watcher.ModelEventWatcherPrinter

# Threaded configurations: Send to thread, thread acts.
# assembl.imodeleventwatcher = assembl.tasks.threaded_model_watcher.ThreadedModelEventWatcher
# celery_tasks.notification_dispatch.imodeleventwatcher = assembl.lib.model_watcher.ModelEventWatcherPrinter
# assembl.threadedmodelwatcher = assembl.models.notification.ModelEventWatcherNotificationSubscriptionDispatcher
# celery_tasks.imap.imodeleventwatcher = assembl.tasks.threaded_model_watcher.ThreadedModelEventWatcher
# celery_tasks.imap.threadedmodelwatcher = assembl.models.notification.ModelEventWatcherNotificationSubscriptionDispatcher

# Broker configurations: send to celery, celery task acts.
assembl.imodeleventwatcher = assembl.tasks.notification_dispatch.ModelEventWatcherCelerySender
celery_tasks.notification_dispatch.imodeleventwatcher = assembl.models.notification.ModelEventWatcherNotificationSubscriptionDispatcher
celery_tasks.imap.imodeleventwatcher = assembl.tasks.notification_dispatch.ModelEventWatcherCelerySender

# ZMQ model changes local socket (backend will connect to this)
# UNIQUE_PER_SERVER
# Convention:
# /0 - /3: reserved for development
# /4: reserved for automated testing
# /5 - /12: production
celery_tasks.imap.broker = redis://localhost:6379/5
celery_tasks.notification_dispatch.broker = redis://localhost:6379/5
celery_tasks.notify.broker = redis://localhost:6379/5
celery_tasks.translate.broker = redis://localhost:6379/5

# Has to be defined as noop.
celery_tasks.notify.imodeleventwatcher = assembl.lib.model_watcher.ModelEventWatcherPrinter
celery_tasks.translate.imodeleventwatcher = assembl.lib.model_watcher.ModelEventWatcherPrinter

cache_viewdefs = true
activate_tour = false
# minified_js = debug builds with map, which is much slower.
minified_js = false

# Default subscriptions
subscriptions.participant.default = FOLLOW_SYNTHESES
    EMAIL_BOUNCED
    EMAIL_VALIDATE
    PARTICIPATED_FOR_FIRST_TIME_WELCOME
    SUBSCRIPTION_WELCOME

# Default URL of the Help page. Each discussion can set a custom URL. You can use "%s" for user interface language
help_url = http://assembl.org/user-guides/

# Paste here the Piwik script corresponding to your server, and replace the site id with "%d".
# So this gives _paq.push(['setSiteId', %d]);
# And ...<img src="//.../piwik.php?idsite=%d"...
# Then, a piwik site id can be set in the administration panel of each discussion.
# If web_analytics_piwik_script or the discussion's piwik site id is empty, the Assembl server does not integrate the Piwik tracking code in the web pages it delivers. 
web_analytics_piwik_script = <!-- Piwik -->
    <script type="text/javascript">
      var _paq = _paq || [];
      _paq.push(['trackPageView']);
      _paq.push(['enableLinkTracking']);
      (function() {
        var u="//piwik.coeus.ca/";
        _paq.push(['setTrackerUrl', u+'piwik.php']);
        _paq.push(['setSiteId', %d]);
        var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
        g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);
      })();
    </script>
    <noscript><p><img src="//piwik.coeus.ca/piwik.php?idsite=%d" style="border:0;" alt="" /></p></noscript>
    <!-- End Piwik Code -->

[pshell]
db = assembl.lib.pshell_session.db
models = assembl.models
transaction = transaction

[alembic]
# Path to migration scripts
script_location = assembl/alembic
sqlalchemy.url = virtuoso://assembl:assembl@VOSU
transaction_per_migration = true

# Template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# Set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

[server:main]
use = egg:waitress#main
host = 0.0.0.0
# If not proxied by nginx or something, public_port in app:main needs to match
# this value
# UNIQUE_PER_SERVER
# Default port is 6543.  
# Convention:
# 6543 thru 6545: reserved for development
# 6546 thru 6547: reserved for automated testing
# 6548-: production
port = 6548

# Begin logging configuration

[loggers]
keys = root, assembl, sqlalchemy, alembic, sentry

[handlers]
keys = console
#keys = console, sentry

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console

[logger_assembl]
level = WARN
handlers =
qualname = assembl

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[logger_sentry]
level = WARN
handlers = console
qualname = sentry.errors
propagate = 0

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_sentry]
class = raven.handlers.logging.SentryHandler
args = ('<raven client key url>',)
level = WARNING
formatter = generic


[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s

# End logging configuration

[filter:raven]
use = egg:raven#raven
dsn = <sentry client key url>
include_paths = assembl
exclude_paths = 

[supervisor]

autostart_virtuoso = true
autostart_celery_imap = true
autostart_celery_notification_dispatch = true
autostart_celery_notify = true
autostart_celery_notify_beat = true
autostart_celery_translate = false
autostart_source_reader = true
autostart_changes_router = true
autostart_pserve = false
autostart_nodesass = false
autostart_gulp = false
autostart_uwsgi = false
autostart_metrics_server = false
autostart_metrics_server = false
autostart_edgesense_server = false

[virtuoso]
# The path can be absolute, or relative to the project root
virtuoso_src = src/virtuoso
# If virtuoso_root = system, whatever version is installed by the OS will be used
virtuoso_root = virtuoso
# A commit can be put here instead of a branch

# Last known good version with the new memory manager, 2015-02-20
virtuoso_branch = 0a891c62cf419110a0ce167f68ce5a35eacc5de3
#virtuoso_branch = develop/7


# The ODBC port.  Standard virtuoso port is 5132
# UNIQUE_PER_SERVER
# Convention:
# 5132 thru 5134: reserved for development
# 5135 thru 5136: reserved for automated testing
# 5137-: production
port = 5137

# The admin interface.  Standard virtuoso port is 8892
# UNIQUE_PER_SERVER
# Convention:
# 8892 thru 8894: reserved for development
# 8895 thru 8896: reserved for automated testing
# 8897-: production
http_port = 8897


[uwsgi]
# Set this dangerous umask if uwsgi is not the same user as nginx. Alternately, use proper uid/gid and run as root.
#umask = 000
#uid = _www
#gid = _www
master = 1
processes = 8
lazy = 1
die-on-term = 1
# Do NOT use threads here, there are problems with pyodbc
# Defining the threads variable with any value enables threading
# threads = DO NOT USE
buffer-size = 65535
socket = %d/var/run/uwsgi.sock
stats = %d/var/run/uwsgi_stats.sock
plugin=python
virtualenv=%dvenv
pythonpath=%d
paste=config://%d%s
# Thunder-lock is only relevant in multiprocess+multithread mode
# thunder-lock = true
